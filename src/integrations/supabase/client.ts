
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables with fallbacks
const SUPABASE_URL = import.meta.env.VITE_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co';
const SUPABASE_ANON_KEY = import.meta.env.VITE_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key';

// Check if credentials are properly configured
const isCredentialsConfigured = () => {
  return SUPABASE_URL !== 'https://placeholder.supabase.co' && 
         SUPABASE_ANON_KEY !== 'placeholder-key' &&
         SUPABASE_URL && 
         SUPABASE_ANON_KEY;
};

// Create the Supabase client with fallback handling
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: sessionStorage,
    },
    global: {
      headers: {
        'x-application-name': 'spring-fall-usa-f1-visa-guide',
      },
    },
  }
);

// Add rate limiting and request monitoring
const createRateLimitedClient = (client: typeof supabase) => {
  let requestCount = 0;
  const requestLimit = 100;
  const requestResetTime = 60000; // 1 minute
  const requestLog = new Map<string, number>();

  setInterval(() => {
    requestCount = 0;
    requestLog.clear();
  }, requestResetTime);

  return {
    from: (table: string) => {
      const originalFrom = client.from(table);
      
      // Wrap all query methods with rate limiting and logging
      const wrapMethod = (method: keyof typeof originalFrom) => {
        const original = originalFrom[method];
        return async (...args: any[]) => {
          // Check if credentials are configured
          if (!isCredentialsConfigured()) {
            console.warn('Supabase credentials not configured. Please connect to Supabase through the Lovable integration.');
            return { data: [], error: { message: 'Supabase not configured' } };
          }

          const endpoint = `${table}:${method}`;
          
          // Check rate limits
          if (requestCount >= requestLimit) {
            throw new Error('Rate limit exceeded. Please try again later.');
          }
          
          // Track request frequency
          const now = Date.now();
          const lastRequest = requestLog.get(endpoint) || 0;
          if (now - lastRequest < 1000) { // Minimum 1 second between same requests
            throw new Error('Request frequency limit exceeded.');
          }
          
          requestCount++;
          requestLog.set(endpoint, now);
          
          try {
            return await original.apply(originalFrom, args);
          } catch (error) {
            console.error(`Supabase query error (${endpoint}):`, error);
            throw error;
          }
        };
      };

      // Return wrapped methods
      return {
        ...originalFrom,
        select: wrapMethod('select'),
        insert: wrapMethod('insert'),
        update: wrapMethod('update'),
        delete: wrapMethod('delete'),
      };
    },
  };
};

// Export rate-limited clients
export const visaExperiencesClient = createRateLimitedClient(supabase);
export const testimonialsClient = createRateLimitedClient(supabase);
